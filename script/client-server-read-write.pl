#!/usr/bin/perl
# Generate client/server read/write XS wrapper, async functions and callback.

use strict;
use warnings;

# name type client-read client-write client-async client-callback
my @funcs = (
  [qw(	Value			Variant		1 1 1 1	)],
  [qw(	DataType		DataType	0 0 1 0	)],
  [qw(	NodeId			NodeId		1 1 1 1	)],
  [qw(	NodeClass		NodeClass	1 1 1 1	)],
  [qw(	BrowseName		QualifiedName	1 1 1 1	)],
  [qw(	DisplayName		LocalizedText	1 1 1 1	)],
  [qw(	Description		LocalizedText	1 1 1 1	)],
  [qw(	WriteMask		UInt32		1 1 1 1	)],
  [qw(	UserWriteMask		UInt32		1 1 1 1	)],
  [qw(	IsAbstract		Boolean		1 1 1 1	)],
  [qw(	Symmetric		Boolean		1 1 1 1	)],
  [qw(	InverseName		LocalizedText	1 1 1 1	)],
  [qw(	ContainsNoLoops		Boolean		1 1 1 1	)],
  [qw(	EventNotifier		Byte		1 1 1 1	)],
  [qw(	ValueRank		Int32		1 1 1 1	)],
  [qw(	AccessLevel		Byte		1 1 1 1	)],
  [qw(	UserAccessLevel		Byte		1 1 1 1	)],
  [qw(	MinimumSamplingInterval	Double		1 1 1 1	)],
  [qw(	Historizing		Boolean		1 1 1 1	)],
  [qw(	Executable		Boolean		1 1 1 1	)],
  [qw(	UserExecutable		Boolean		1 1 1 1	)],
);

open(my $cf, '>', "Open62541-client-read-callback.xsh")
    or die "Open 'Open62541-client-read-callback.xsh' for writing failed: $!";
print $cf "/* begin generated by $0 */\n\n";
open(my $crwf, '>', "Open62541-client-read-write.xsh")
    or die "Open 'Open62541-client-read-write.xsh' for writing failed: $!";
print $crwf "# begin generated by $0\n\n";

my (%names, %types);
foreach (@funcs) {
    my ($name, $type, $cr, $cw, $ca, $cc) = @$_;
    $names{$name} = $_;
    for (my $i = 0; $i < @$_; $i++) {
	$types{$type}->[$i] ||= $_->[$i];
    }
}
foreach my $name (sort keys %names) {
    my (undef, $type, $cr, $cw, $ca, $cc) = @{$names{$name}};
    print_xsread($crwf, $name, $type) if $cr;
    print_xswrite($crwf, $name, $type) if $cw;
    print_xsasync($crwf, $name, $type) if $ca;
}
foreach my $type (sort keys %types) {
    my (undef, undef, $cr, $cw, $ca, $cc) = @{$types{$type}};
    print_xscallback($cf, $type) if $cc;
}

print $cf "/* end generated by $0 */\n";
close($cf) or die
    "Close 'Open62541-client-read-callback.xsh' after writing failed: $!";
print $crwf "# end generated by $0\n";
close($crwf) or die
    "Close 'Open62541-client-read-write.xsh' after writing failed: $!";

exit(0);

########################################################################
sub print_xsread {
    my ($xsf, $name, $type) = @_;
    my $func = "${name}Attribute";
    print $xsf <<"EOXSFUNC";
UA_StatusCode
UA_Client_read${func}(client, nodeId, out${name})
	OPCUA_Open62541_Client		client
	OPCUA_Open62541_NodeId		nodeId
	OPCUA_Open62541_${type}		out${name}
    CODE:
	RETVAL = UA_Client_read${func}(client->cl_client, *nodeId, out${name});
	XS_pack_UA_${type}(SvRV(ST(2)), *out${name});
    OUTPUT:
	RETVAL

EOXSFUNC
}

########################################################################
sub print_xswrite {
    my ($xsf, $name, $type) = @_;
    my $func= "${name}Attribute";
    print $xsf <<"EOXSFUNC";
UA_StatusCode
UA_Client_write${func}(client, nodeId, new${name})
	OPCUA_Open62541_Client		client
	OPCUA_Open62541_NodeId		nodeId
	OPCUA_Open62541_${type}		new${name}
    CODE:
	RETVAL = UA_Client_write${func}(client->cl_client, *nodeId, new${name});
    OUTPUT:
	RETVAL

EOXSFUNC
}

########################################################################
sub print_xsasync {
    my ($xsf, $name, $type) = @_;
    my $func = "${name}Attribute";
    print $xsf <<"EOXSFUNC";
UA_StatusCode
UA_Client_read${func}_async(client, nodeId, callback, data, outoptReqId)
	OPCUA_Open62541_Client		client
	OPCUA_Open62541_NodeId		nodeId
	SV *				callback
	SV *				data
	OPCUA_Open62541_UInt32		outoptReqId
    PREINIT:
	ClientCallbackData		ccd;
    CODE:
	ccd = newClientCallbackData(callback, ST(0), data);
	RETVAL = UA_Client_read${func}_async(client->cl_client,
	    *nodeId, clientAsyncRead${type}Callback, ccd, outoptReqId);
	if (RETVAL != UA_STATUSCODE_GOOD)
		deleteClientCallbackData(ccd);
	if (outoptReqId != NULL)
		XS_pack_UA_UInt32(SvRV(ST(4)), *outoptReqId);
    OUTPUT:
	RETVAL

EOXSFUNC
}

########################################################################
sub print_xscallback {
    my ($xsf, $type) = @_;
    print $xsf <<"EOXSFUNC";
static void
clientAsyncRead${type}Callback(UA_Client *client, void *userdata,
    UA_UInt32 requestId, UA_${type} *var)
{
	dTHX;
	SV *sv;

	sv = newSV(0);
	if (var != NULL)
		XS_pack_UA_${type}(sv, *var);

	clientCallbackPerl(client, userdata, requestId, sv);
}

EOXSFUNC
}
